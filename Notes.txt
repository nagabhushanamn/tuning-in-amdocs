

java tech
---------

 - java SE

    - application
    - applet

- java EE

    - web components ( sevlet & jsp )
    - ejb components ( session , entity , MDB )

-------------------------------------------

java pogamming style 

 java appln = component(s) + container

 component ==> appl'n logic  
 container ==> infra logic


-------------------------------------------

 - java SE

    - application   ==> JRE
    - applet        ==> browser with JRE

 - java EE   

    - web components ( sevlet & jsp ) ==> web container e.g tomcat, jetty , ...
    - ejb components                  ==> ejb container e.g tomee


 JEE sever  = web container + ejb container + entepise service

   e.g

   oracle   ==> weblogic
   IBM      ==> websphere
   JBOSS    ==> jboss


------------------------------------------------------- 

java language:

performance factor(s)

    - good design of appln
    - good data-structures / collections
    - good concurrency implementations

--------------------------------------------------------

Txr-system
------------

    1. model/data

        - Customer
        
        - Account
            -num
            -balance

        - Txn

    2. layer(s)

        a.  repository layer ==> persisting logic
        b.  service layer    ==> pocessing logic
        c.  web layer        ==> request / response logic


--------------------------------------------------------



 design & pefomance issues
 ---------------------------

 => dependent & dependency are tightly-coupled
    -> can't extend with new features
 => too many duplicate dependency instances are created & discarded
    -> slow, memory/resouce use high
 => unit-testing not possible
    -> dev & bug fix slow

reasons for these issues ?

    -> dependent itself creating its own dependency

soln:

    -> dont create , do lookup on factory  ==> factory design pattern

limitation on factory lookup ?

    -> factory location tight coupling...

best soln :

    -> don't create / lookup , get inject by 'third-party'  ( inversion of contol ( ioc ))


    how to implement IOC ?

    -> dependency injection ( DI )

        - constructor
        - method




--------------------------------------------------------
OO concepts
--------------------------------------------------------

- Abstraction
- Encasulation
- Inheitance
- Polymophism

--------------------------------------------------------
OO principles
--------------------------------------------------------

- Single Responsiblity
- Open & closed
- Liskov, substitution
- Interface segregation 
- dependency inversion

SOLID principles



--------------------------------------------------------
OO patterns
--------------------------------------------------------

- creational
- behav
- stuctual




--------------------------------------------------------
// data stuctues / collections
--------------------------------------------------------


 -- CRUDSS


1 . list

        - ordered
        - indexed
        - duplicates

2.  set

        - unique

3.  map

        - key + value

------------------------------------------------------

e.g   hashTable 

            - HashSet
            - LinkedHashSet
            - HashMap
            - LinkekedHashMap
            - Hashtable


    |    |
    |    |
    |    |
    |    |
    |    |
45  |hell| abc |
    |    |
    |    |
    |    |



e.g JRE's stingtable uses HashMap structure

------------------------------------------------------------


java concurrency 
------------------


   process vs thread


    process:
    --------

        -> whole execution within OS
        -> own's private memory

    thread
    ------    

        -> light-weight process
        -> within prrocess, multiple theads can share same heap-memory


-------------------------------------------------------------------

porgamming languages
--------------------


.java   ----->  .class ( byte codes )


              
-------------------------------------------------------------------              

JDK-monitoing-tools
--------------------



Using jps
----------



> jps
> jps -l  
> jps -m
> jps -v
> jps -q
> jps -help



Using the jcmd Command
--------------------------

> jcmd | jps -m
> jcmd -l
> jcmd <pid> help
  
  information about the VM or the garbage collector (GC) 
  can be queried and the results returned to the command prompt window.


> jcmd <pid> VM.version
> jcmd <pid> VM.system_properties
> jcmd <pid> VM.flags
> jcmd <pid> VM.uptime
> jcmd <pid> GC.class_histogram > temp.txt
> jcmd <pid> PerfCounter.print


Using the jstat Utility
--------------------------


    > jstat -gcutil <pid> 5000


    S0: Survivor space 0 utilization as a percentage of the space's current capacity
    S1: Survivor space 1 utilization as a percentage of the space's current capacity
    E: Eden space utilization as a percentage of the space's current capacity
    O: Old space utilization as a percentage of the space's current capacity
    P: Permanent space utilization as a percentage of the space's current capacity
    YGC: Number of young generation GC events
    YGCT: Young generation garbage collection time
    FGC: Number of full GC events
    FGCT: Full garbage collection time
    GCT: Total garbage collection time


    > jstat -gcutil <pid>@remotehost 5000



heap dump
----------

Heap dump is a snapshot of the Java memory. 
It contains information about the Java objects 
and classes in the heap at the moment the snapshot is triggered.

It’s vital artifact to diagnose any 
Java memory related problems.


using jmap - Memory Map
-----------------------

jmap [ option ] pid
jmap [ option ] [server-id@]remote-hostname-or-IP

> jmap -dump:live,format=b,file=<file-name>.hprof  <pid>


Heap dumps can be captured using several mechanisms.

way-1
--------
 - Identify the Process Id
    > jps
 - Capture Heap Dump – jmap
    > jmap -dump:live,file=<file-path> <pid>
    e.g
    jmap -dump:live,file=/opt/tmp/app-heapdump.hprof <pid>

way-2
-------

    Capture Heap Dump – HeapDumpOnOutOfMemoryError
    -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/logs/heapdump







using Java Heap Analysis Tool ( jhat )
--------------------------------------

https://docs.oracle.com/javase/7/docs/technotes/tools/share/jhat.html


How to start jhat?

jhat -J-Xmx -port  
where
memory-size: JVM argument. memory size with which JVM needs to be launched
port-number: Port in which jhat web application can be accessed 
file-path: Location of Heap dump file


jhat -J-Xmx2g -port 7001 /opt/workspace/tier1app/artifacts/LeakingMap/heapDump-2.bin


Web Access – jhat

 http://localhost:7001


using jconsole
--------------


using JvisualVM
---------------

using jmc ( java missing contol )
-----------------------------------

    - JMX console
    - JFR ( java flight recoder)

    




heap dump Analysis tool(s)
---------------------------

 - Eclipse MAT tool


thead dump Analysis
---------------------------

 - online tools


gc logs
-----------------------------

online tools

 - gcplot
 - gceasy

- Eclipse gc plugin


--------------------------------------------------------

    commercial tools
    -----------------

        - jpofiler
        - yourkit
        ....

---------------------------------------------------------    




-----------------------------------------------------------------------------------------
Introduction
-----------------------------------------------------------------------------------------
✔ Oracle HotSpot  ( our focus )

✔ JVM Tuning Flags

    - JVM accepts two kinds of flags: 
      boolean flags, and flags that require a parameter.

       ✔ Boolean flags use this syntax: 
      
       -XX:+FlagName enables the flag, and -XX:-FlagName disables the flag.

       ✔ Flags that require a parameter use this syntax: 
       
       -XX:FlagName=something



-----------------------------------------------------------------------------------------
The Complete Performance Story
-----------------------------------------------------------------------------------------

   ✔ Write Better Algorithms
        - A good algorithm is the most important thing when it comes to fast performance.

    ✔ Write Less Code
        - small well-written program will run faster than a large well-written program.

    ✔ Oh Go Ahead, Prematurely Optimize

        eg.

        #1
        log.log(Level.FINE, "I am here, and the value of X is " + calcX() + " and Y is " + calcY());    

        #2
        if (log.isLoggable(Level.FINE)) { 
            log.log(Level.FINE,"I am here, and the value of X is {} and Y is {}", new Object[]{calcX(), calcY()});
        }


    ✔ Look Elsewhere: The Database Is Always the Bottleneck


-----------------------------------------------------------------------------------------
An Approach to Performance Testing
-----------------------------------------------------------------------------------------


 ✔ Test a Real Application
 ✔ Understand Throughput, Batching, and Response Time
 ✔ Understand Variability
 ✔ Test Early, Test Often


-----------------------------------------------------------------------------------------
A Java Performance Toolbox
-----------------------------------------------------------------------------------------


 - Performance analysis is all about visibility
 - Visibility is all about tools. And so performance tuning is all about tools.



Operating System Tools and Analysis
-----------------------------------

✔ CPU Usage

    1. CPU time is the first thing 
       to examine when looking at performance of an application.
    2. The goal in optimizing code is to drive the CPU usage up (for a shorter period of time),
       not down.
    3. Understand why CPU usage is low before diving in and attempting to tune an application.


✔ Disk Usage

    1. Monitoring disk usage is important for all applications.
       For applications that don’t directly write to disk,
       system swapping can still affect their performance.

    2. Applications that write to disk can be bottlenecked both
       because they are writing data inefficiently (too little throughput)
       or because they are writing too much data (too much throughput).
    

✔ Network Usage

    1. For network-based applications,
       make sure to monitor the network to make sure it hasn’t become a bottleneck.
    2. Applications that write to the network can be bottlenecked both
       because they are writing data inefficiently (too little through‐ put)
       or because they are writing too much data (too much throughput).



Java Monitoring Tools
-----------------------------------


    To gain insight into the JVM itself, 
    Java monitoring tools are required. 

    A number of tools come with the JDK:



✔ jcmd   

    - Prints basic class, thread, and VM information for a Java process.


✔ jconsole

    - Provides a graphical view of JVM activities,
      including thread usage, class usage, and GC activities.

✔ jhat

    - Reads and helps analyze memory heap dumps.
      This is a postprocessing utility.

✔ jmap

    - Provides heap dumps and other information about JVM memory usage.Suitable for scripting.

✔ jinfo

    - Provides visibility into the system properties of the JVM,
      and allows some system properties to be set dynamically. Suitable for scripting.

✔ jstack
    
    - Dumps the stacks of a Java process. Suitable for scripting.

✔ jstat
    
    - Provides information about GC and class-loading activities. Suitable for scripting.

✔ jvisualvm
    
    - A GUI tool to monitor a JVM, profile a running application, and analyze JVM heap dumps



These tools fits into these broad areas:

    • Basic VM information
    • Thread information
    • Class information
    • Live GC analysis
    • Heap dump postprocessing
    • Profiling a JVM



Basic VM Information
---------------------


✔ Uptime

  % jcmd process_id VM.uptime

✔ System properties

  % jcmd process_id VM.system_properties
  or
  % jinfo -sysprops process_id  

✔ JVM version

  % jcmd process_id VM.version

✔ JVM command line

  % jcmd process_id VM.command_line

✔ JVM tuning flags

  % jcmd process_id VM.flags [-all]  

  % java other_options -XX:+PrintFlagsFinal -version  

  % jinfo -flags process_id

  % jinfo -flag PrintGCDetails process_id

  % jinfo -flag -PrintGCDetails process_id  

summary:

    1. jcmd can be used to find the basic JVM information—includ‐ ing the value of all the tuning flags—for a running application.
    2. Default flag values can be found by including -XX:+PrintFlags Final on a command line. This is useful for determining the default ergonomic settings of flags on a particular platform.
    3. jinfo is useful for inspecting (and in some cases changing) in‐ dividual flags.




✔ Thread Information

  % jstack process_id

  % jcmd process_id Thread.print

✔ Class Information  

✔ Live GC Analysis

✔ Heap Dump Postprocessing



✔ Profiling Tools



summary:

    - No tool is perfect, and competing tools have relative strengths.
    - Command-line monitoring tools can gather important data automatically
    - Tools rapidly evolve





-----------------------------------------------------------------------------------------
Introduction
-----------------------------------------------------------------------------------------
✔ Oracle HotSpot VM 

✔ JVM Tuning Flags

    - JVM accepts two kinds of flags: 
      boolean flags, and flags that require a parameter.

       ✔ Boolean flags use this syntax: 
      
       -XX:+FlagName enables the flag, and -XX:-FlagName disables the flag.

       ✔ Flags that require a parameter use this syntax: 
       
       -XX:FlagName=something


       ✔ java -XX:+PrintFlagsFinal



---------------------------------------------------------
 VM - memory
 --------------------------------------------------------



 - perm-gen/method-area ( java 7 ) / meta-space ( java 8)
 - heap
 - stack
 



 ✔ java.lang.OutOfMemoryError : PermGen

    -XX:PermSize=N
    -XX:MaxPermSize=N

    


------------------------------------------------------------------------------------------
Internal JVM memory optimization 
------------------------------------------------------------------------------------------

 - Ex1.java

 ✔ string constant pool ( scp ) / sting table / hash-table data structure
 ✔ interning string  
    
    - since java-7 , string table lives in Heap.


------------------------------------------------------------------------------------------
Tuning the JVM 's memory settings
------------------------------------------------------------------------------------------

 - Ex2.java 

 ✔ understanding the size & density of the string pool

    - string pool implemented using HashMap data-structure 

    > java -XX:+PrintStringTableStatistics com.example.Ex2

 ✔ Tuning the size of the string pool

    > java -XX:+PrintStringTableStatistics -XX:StringTableSize=120121 com.example.Ex2
  
 ✔ Tuning the size of the heap

    > java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal

    > java -XX:MaxHeapSize=600m -XX:+PrintStringTableStatistics -XX:StringTableSize=120121 com.example.Ex2

    > java -XX:InitialHeapSize=1g -XX:+PrintStringTableStatistics -XX:StringTableSize=120121 com.example.Ex2



✔ Shortcut syntax for heap tuning flags

        -XX:+PrintStringTableStatistics
        -XX:StringTableSize=n

        -XX:MaxHeapSize=n            or  -Xmx
        -XX:InitialHeapSize=n        or  -Xms

                                         -Xss

        -XX:+UnlockDiagnosticVMOptions
        -XX:+PrintFlagsFinal

        e.g

        java -Xms1g -Xmx2g -XX:+PrintStringTableStatistics -XX:StringTableSize=120121 com.example.Ex2



------------------------------------------------------------------------------------------
Introduction to Garbage Collection
------------------------------------------------------------------------------------------
 
 - Ex3.java

✔ What it means when we say Java is a managed language

 - Java works out when objects are no longer needed
 - Garbage collection is the process to free up memory 


✔ How Java knows which objects can be removed from the Heap
    - unreachable objects on heap

 i.e 
        Any object on the heap which cannot be reached 
        through a reference from the stack is 'eligible for garbage collection'


✔ The System.gc() method

    - https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#gc()

✔ Why it's not a good idea to run the System.gc() method

✔ The finalize() method

✔ The danger of using finalize()

    

------------------------------------------------------------------------------------------
Monitoring the Heap
------------------------------------------------------------------------------------------

Ex4.java

✔ Memory leaks
    ✔ Memory leaks shouldn't be possible in java

✔ Soft Leaks - when an object remains referenced when no longer needed


 > java -Xmx10m com.example.Ex4
 
✔ Introducing (J)VisualVM

✔ Monitoring the size of the heap over time

    > java -Xmx50m com.example.Ex4

✔ Fixing the problem and checking the heap size    



------------------------------------------------------------------------------------------
Analyzing a heap dump    
------------------------------------------------------------------------------------------

✔ Generating Heap Dump

    way-1:

        - command line

            -XX:+HeapDumpOnOutOfMemoryError
            -XX:HeapDumpPath=someFilePath

        > java -Xmx50m com.examples.Ex4


    way-2:

    > jmap command line tool

    way-3 :

    > GUI based pofiling tools 



✔ Viewing Heap Dump    

    way-1 : jhat command line tool

    way-2 : Eclipse MAT tool


------------------------------------------------------------------------------------------
garbage collection    
------------------------------------------------------------------------------------------


✔ The "Mark and Sweep" process with compact


✔ "Stop-the-world" pause

        - Stop-the-world means that the JVM is stopping the application
          from running to execute a GC.
        - GC tuning often means reducing this stop-the-world time.

✔ Generational garbage collection

    This garbage collector was created based on the following two hypotheses.

     - Most objects soon become unreachable.
     - References from old objects to young objects only exist in small numbers
        i.e if an object survives it is likely to live forever



     ✔ Heap in HotSpot VM.
        
        - young generation -- "minor GC" 
        - old generation   -- "major GC" (or a "full GC")

    ✔ young generation

        - Eden
        - s0
        - s1


    ✔ Viewing the generations in VisualVM    

        - install Visual GC plugin

    
    ✔ Viewing the heap when there's a soft-leak
    

------------------------------------------------------------------------------------------
garbage collection tuning & selection  
------------------------------------------------------------------------------------------

Ex5.java
 
✔ Monitoring garbage collection

    > java -Xmx20m -verbose:gc com.example.Ex5


✔ Turning off automated heap allocation sizing    

    -XX:-UseAdaptiveSizePolicy

    verify

    > jps
    > jinfo -flag UseAdaptiveSizePolicy <pid>


✔ Tuning garbage collection - old and young allocation    

    -XXNewRatio=n

    > jinfo -flag NewRatio <pid>

    > java -Xmx20m -XX:NewRatio=1 com.examples.Ex5

✔ Tuning garbage collection - survivor space allocation

    -XX:SurvivorRatio=n

    > jinfo -flag SurvivorRatio <pid>

    > java -Xmx20m -XX:NewRatio=1 XX:SurvivorRatio=5 com.example.Ex5

✔ Tuning garbage collection - generations needed to become old

    -XX:MaxTenuringThreshold=n

    > jinfo -flag MaxTenuringThreshold <pid>


--------------------------------------------------------------


✔ choosing garbage collector

    According to JDK 7, there are GC types. 
        
        1. Serial GC  

            - this GC implementation freezes all application threads when it runs.

             > java -XX:+UseSerialGC -jar Application.java

        // JDK 1.6    
        2. Parallel GC  => -XX:+UseParallelGC

            - this uses multiple threads for managing heap space

            -  But it also freezes other application threads while performing GC.

            - If we use this GC, we can specify maximum garbage collection threads and pause time, 
              throughput and footprint (heap size).

            - The numbers of garbage collector threads can be controlled with the command-line option -XX:ParallelGCThreads=<N>.

            - The maximum pause time goal (gap [in milliseconds] between two GC)is specified with the command-line option -XX:MaxGCPauseMillis=<N>.

            > java -XX:+UseParallelGC -jar Application.java

         // JDK 1.7
        3. Concurrent Mark & Sweep GC  (or "CMS") => -XX:+UseConcMarkSweepGC

            - applications using this type of GC respond slower on average
              but do not stop responding to perform garbage collection.

              > java -XX:+UseParNewGC -jar Application.java  

        // JDK 1.9
        4. Garbage First (G1) GC => -XX:+UseG1GC      

             > java -XX:+UseG1GC -jar Application.java


             -XX:ConcGCThreads=N
             -XX:InitiatingHeapOccupancyPercent   


✔ Sting de-duplication

    -XX:UseStringDeDuplication ( only available if using G1)

---------------------------------------------------------------------------------
  

How to Generate GC Log File?

-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:<file-path>



To diagnose any memory problems, the Garbage Collection log file is the best place to start. It provides several interesting statistics:

    When the scavenge (or Young generation) GC ran?
    When the full GC ran?
    How many scavenge GCs and Full GCs ran? Did they run repeatedly? In what interval?
    After the GC process ran, how much memory was reclaimed in Young, Old, and Permanent/Metaspace generations?
    How long did the GC run?
    How long did JVM pause when Full GC run?
    What was the total allocated memory in each generation?
    How many objects were promoted to old generation?





---------------------------------------------------------------------------------
Ex.    
---------------------------------------------------------------------------------

Reachability

any basic Garbage Collection algorithm mainly has two steps.

 a. Mark all live objects. These objects are reachable from Garbage Collection roots.
 b. Sweep away all unreachable objects.

So, basically there are two types of objects in memory.

    - Reachable: Any object with a direct path from a Garbage Collection root.
    - Unreachable: Any object with no direct path from a Garbage Collection root.            

Reachability and Garbage Collection roots
What are Garbage Collection roots? The GC roots are the objects accessible from outside the heap. 
The GC algorithms build a tree of live objects starting from these GC roots.

Following are some GC roots.

    System Class: Class loaded by bootstrap/system class loader.
    Thread Block: Objects referred to from currently active thread blocks. (Basically all objects in active thread blocks when a GC is happening are GC roots)
    Thread: Active Threads
    Java Local: All local variables (parameters, objects or methods in thread stacks)
    JNI Local: Local variables in native code
    JNI Global: Global variables in native code
   

Shallow heap 
    is the memory consumed by one object. The actual memory consumed by one object depends on the underlying architecture.
Retained Heap 
    of an object is the sum of shallow sizes of all objects in the retained set of that object.

Retained set 
    of an object is the set of objects, which would be removed by GC when that particular object is garbage collected.   


The Dominator Tree

    An object x dominates an object y if every path in the object graph from the start (or the root) node to y must go through x.
    



